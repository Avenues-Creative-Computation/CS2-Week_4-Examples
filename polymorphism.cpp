/* DO NOT EDIT THIS FILE */
//this is an example of polymorphism

//include required libraries
#include <iostream>
#include <string>
#include <vector>

//use all names in standard library
using namespace std;

//declaring the parent class
class Person {
  //parent attributes
  private:
    string fname;
    string lname;
    string email;

  public:
  //parent constructor
  Person(string fn, string ln) : fname(fn), lname(ln) { //pass the parameters to the attributes
  //constructor is empty
  }
  //parent accessor method
  void displayProfile() {
    cout << "Name:"<< fname << " " << lname << endl ;
  }

  void setEmail(string em) {
      //this method will take a string and store it to the email attribute
  }

}; //end base class

//defining a student class that is the child of the person class
class Student: public Person {
  private:
  //class attributes
  int gradyr;
  int admityr;
  int gradelvl;
  
  //specify functions as public by using the public keyword before defingthing them
  public: 
  //constructor with parameters
  Student(string fn, string ln, int ay, int gy) : Person (fn, ln) {
    //convert parameters to attributes
    admityr = ay;
    gradyr = gy;
  }

  //child accessor method overrides parent method
  void displayProfile() {
    //call parent method
    Person::displayProfile();
    cout << "Admit Year:" << admityr << endl;
    cout << "Grad Year:" << gradyr << endl;
    cout << endl;
  }

}; //end class definition

//defining a teacher class that is the child of the person class
class Teacher: public Person {
  private:
  //class attributes
  vector<string> subjects;
  string division;
  vector<int> gradelvls;
  
  //specify functions as public by using the public keyword before defingthing them
  public: 
  //constructor with parameters
  Teacher(string fn, string ln, vector<string> subs, string div, vector<int> gls) : Person (fn, ln) {
    //convert parameters to attributes
    subjects = subs;
    division = div;
    gradelvls = gls;
  }

  //child accessor method - overrides parent method
  void displayProfile() {
    //call the parent method
    Person::displayProfile();
    cout << "Division:" << division << endl;
    cout << "Subjects:";

    //loop through subjects vector
    for (int s = 0; s < subjects.size(); s++) {
        cout << " " << subjects[s] << ",";
    }

    cout << endl;
    cout << "Grades Levels:";

    //loop through gradelevels vector
    for (int g = 0; g < gradelvls.size(); g++) {
        cout << " " << gradelvls[g] << ",";
    }
    cout << endl << endl;
  }

}; //end class definition

int main() { 

  //create a new student instance with parameters
  Student student3("Jonah","Sladkus",2017,2023);

  //create a new teacher instance with parameters
  //make subjects vector
  vector<string> subjects;
  subjects.push_back("Computer Science");
  subjects.push_back("Design and Engineering");
  subjects.push_back("Mastery");

  //make grade levels vector
  vector<int> gradelevels;
  gradelevels.push_back(10);
  gradelevels.push_back(11);
  gradelevels.push_back(12);


  Teacher teacher1("Katy","Garnier",subjects,"Upper",gradelevels);

  //call the child accessor
  student3.displayProfile();
  

  //call the parent accessor
  teacher1.displayProfile();

  return 0;
}