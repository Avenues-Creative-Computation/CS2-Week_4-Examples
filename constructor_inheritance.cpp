/* DO NOT EDIT THIS FILE */
//this is an example of constructor inheritance

//include required libraries
#include <iostream>
#include <string>

//use all names in standard library
using namespace std;

//declaring the parent class
class Person {
  //parent attributes
  private:
    string fname;
    string lname;
    string email;

  public:
  //parent constructor
  Person(string fn, string ln) : fname(fn), lname(ln) { //pass the parameters to the attributes
  //constructor is empty
  }
  //parent accessor
  string getName() {
    return fname + " " + lname;
  }

}; //end base class

//defining a student class that is the child of the person class
class Student: public Person {
  private:
  //class attributes
  int gradyr;
  int admityr;
  int gradelvl;
  
  //specify functions as public by using the public keyword before defingthing them
  public: 
  //constructor with parameters
  Student(string fn, string ln, int ay, int gy) : Person (fn, ln) {
    //convert parameters to attributes
    admityr = ay;
    gradyr = gy;
  }

  //child accessor function
  void displayProfile() {
    cout << Person::getName() << endl;
    cout << "Admit Year:" << admityr << endl;
    cout << "Grad Year:" << gradyr << endl;
  }

}; //end class definition

int main() { 

  //create a new instance with parameters
  Student student3("Donald","Duck",2011,2022);

  //call the parent accessor
  cout << student3.getName() << endl;

  //call the child accessor
  student3.displayProfile();
  return 0;

}